{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/react-project-team-lunch/react-project-team-lunch-frontend/src/roulette/RouletteContainer.js\";\nimport React, { Component } from \"react\";\nimport RouletteCard from \"./RouletteCard\";\nimport RouletteForm from \"./RouletteForm\";\nimport { Image } from \"semantic-ui-react\";\nconst spinning_pizza = \"https://slack-imgs.com/?c=1&o1=ro&url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F3o7bu8sRnYpTOG1p8k%2Fgiphy.gif\";\nconst style = {\n  // color: 'white',\n  textAlign: \"center\",\n  padding: \"10px 10px\",\n  color: \"black\"\n};\nexport default class RouletteContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showRouletteForm: true,\n      showPizza: false,\n      showCard: false,\n      indexArray: [0]\n    };\n\n    this.handleSpin = (e, data) => {\n      this.props.fetchYelp(data.locationInput, data.categoryInput);\n      this.setState({\n        showRouletteForm: false,\n        showPizza: true\n      });\n      this.handleTimer();\n    };\n\n    this.handleTimer = () => {\n      // countdown a couple seconds changing the set to pizza: true, card: false and back\n      this.setState({\n        showPizza: true,\n        showCard: false\n      });\n      this.intervalID = setInterval(() => {\n        this.setState({\n          showPizza: false,\n          showCard: true\n        });\n        console.log(\"pizza\");\n        clearInterval(this.intervalID);\n      }, 3000);\n    };\n\n    this.randomYelp = array => {\n      this.handleTimer();\n      let randIndex = Math.floor(Math.random() * 10);\n\n      while (array.includes(randIndex)) {\n        randIndex = Math.floor(Math.random() * 10);\n      }\n\n      this.setState({\n        indexArray: [...this.state.indexArray, randIndex]\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCurrentUser();\n    this.props.fetchUsers();\n    this.props.fetchTeams();\n    console.log(\"roulette\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          fetchYelp = _this$props.fetchYelp,\n          yelpResults = _this$props.yelpResults,\n          setResult = _this$props.setResult;\n    const _this$state = this.state,\n          showRouletteForm = _this$state.showRouletteForm,\n          showPizza = _this$state.showPizza,\n          showCard = _this$state.showCard,\n          indexArray = _this$state.indexArray; // console.log(this.props)\n    // console.log(this.state)\n\n    return React.createElement(\"div\", {\n      style: style,\n      className: \"roulette-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, showRouletteForm ? React.createElement(RouletteForm, {\n      handleDropDown: this.handleDropdown,\n      handleSpin: this.handleSpin,\n      fetchYelp: fetchYelp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }) : null, showPizza ? React.createElement(Image, {\n      src: spinning_pizza,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }) : null, showCard ? React.createElement(RouletteCard, {\n      yelpResults: yelpResults,\n      handleSpin: this.handleSpin,\n      selectContainer: this.props.selectContainer,\n      handleTimer: this.handleTimer,\n      randomYelp: this.randomYelp,\n      indexArray: indexArray,\n      setResult: setResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/home/phil/dev/projects/react-project-team-lunch/react-project-team-lunch-frontend/src/roulette/RouletteContainer.js"],"names":["React","Component","RouletteCard","RouletteForm","Image","spinning_pizza","style","textAlign","padding","color","RouletteContainer","state","showRouletteForm","showPizza","showCard","indexArray","handleSpin","e","data","props","fetchYelp","locationInput","categoryInput","setState","handleTimer","intervalID","setInterval","console","log","clearInterval","randomYelp","array","randIndex","Math","floor","random","includes","componentDidMount","fetchCurrentUser","fetchUsers","fetchTeams","render","yelpResults","setResult","handleDropdown","selectContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,MAAMC,cAAc,GAClB,8GADF;AAGA,MAAMC,KAAK,GAAG;AACZ;AACAC,EAAAA,SAAS,EAAE,QAFC;AAGZC,EAAAA,OAAO,EAAE,WAHG;AAIZC,EAAAA,KAAK,EAAE;AAJK,CAAd;AAOA,eAAe,MAAMC,iBAAN,SAAgCT,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACvDU,KADuD,GAC/C;AACNC,MAAAA,gBAAgB,EAAE,IADZ;AAENC,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,QAAQ,EAAE,KAHJ;AAINC,MAAAA,UAAU,EAAE,CAAC,CAAD;AAJN,KAD+C;;AAAA,SAevDC,UAfuD,GAe1C,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACxB,WAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAI,CAACG,aAA1B,EAAyCH,IAAI,CAACI,aAA9C;AACA,WAAKC,QAAL,CAAc;AACZX,QAAAA,gBAAgB,EAAE,KADN;AAEZC,QAAAA,SAAS,EAAE;AAFC,OAAd;AAIA,WAAKW,WAAL;AACD,KAtBsD;;AAAA,SAwBvDA,WAxBuD,GAwBzC,MAAM;AAClB;AACA,WAAKD,QAAL,CAAc;AAAEV,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAAd;AACA,WAAKW,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAClC,aAAKH,QAAL,CAAc;AAAEV,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,QAAQ,EAAE;AAA9B,SAAd;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAC,QAAAA,aAAa,CAAC,KAAKJ,UAAN,CAAb;AACD,OAJ4B,EAI1B,IAJ0B,CAA7B;AAKD,KAhCsD;;AAAA,SAkCvDK,UAlCuD,GAkC1CC,KAAK,IAAI;AACpB,WAAKP,WAAL;AACA,UAAIQ,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAhB;;AACA,aAAOJ,KAAK,CAACK,QAAN,CAAeJ,SAAf,CAAP,EAAkC;AAChCA,QAAAA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAZ;AACD;;AACD,WAAKZ,QAAL,CAAc;AAAER,QAAAA,UAAU,EAAE,CAAC,GAAG,KAAKJ,KAAL,CAAWI,UAAf,EAA2BiB,SAA3B;AAAd,OAAd;AACD,KAzCsD;AAAA;;AAQvDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,KAAL,CAAWmB,gBAAX;AACA,SAAKnB,KAAL,CAAWoB,UAAX;AACA,SAAKpB,KAAL,CAAWqB,UAAX;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;;AA8BDa,EAAAA,MAAM,GAAG;AAAA,wBACuC,KAAKtB,KAD5C;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYsB,WADZ,eACYA,WADZ;AAAA,UACyBC,SADzB,eACyBA,SADzB;AAAA,wBAEuD,KAAKhC,KAF5D;AAAA,UAECC,gBAFD,eAECA,gBAFD;AAAA,UAEmBC,SAFnB,eAEmBA,SAFnB;AAAA,UAE8BC,QAF9B,eAE8BA,QAF9B;AAAA,UAEwCC,UAFxC,eAEwCA,UAFxC,EAGP;AACA;;AACA,WACE;AAAK,MAAA,KAAK,EAAET,KAAZ;AAAmB,MAAA,SAAS,EAAC,oBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,gBAAgB,GACf,oBAAC,YAAD;AACE,MAAA,cAAc,EAAE,KAAKgC,cADvB;AAEE,MAAA,UAAU,EAAE,KAAK5B,UAFnB;AAGE,MAAA,SAAS,EAAEI,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADe,GAMb,IAPN,EASGP,SAAS,GACR,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAER,cAAZ;AAA4B,MAAA,KAAK,EAAE;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,GAEN,IAXN,EAaGO,QAAQ,GACP,oBAAC,YAAD;AACE,MAAA,WAAW,EAAE4B,WADf;AAEE,MAAA,UAAU,EAAE,KAAK1B,UAFnB;AAGE,MAAA,eAAe,EAAE,KAAKG,KAAL,CAAW0B,eAH9B;AAIE,MAAA,WAAW,EAAE,KAAKrB,WAJpB;AAKE,MAAA,UAAU,EAAE,KAAKM,UALnB;AAME,MAAA,UAAU,EAAEf,UANd;AAOE,MAAA,SAAS,EAAE4B,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,GAUL,IAvBN,CADF;AA2BD;;AA3EsD","sourcesContent":["import React, { Component } from \"react\"\nimport RouletteCard from \"./RouletteCard\"\nimport RouletteForm from \"./RouletteForm\"\nimport { Image } from \"semantic-ui-react\"\nconst spinning_pizza =\n  \"https://slack-imgs.com/?c=1&o1=ro&url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F3o7bu8sRnYpTOG1p8k%2Fgiphy.gif\"\n\nconst style = {\n  // color: 'white',\n  textAlign: \"center\",\n  padding: \"10px 10px\",\n  color: \"black\"\n}\n\nexport default class RouletteContainer extends Component {\n  state = {\n    showRouletteForm: true,\n    showPizza: false,\n    showCard: false,\n    indexArray: [0]\n  }\n\n  componentDidMount() {\n    this.props.fetchCurrentUser()\n    this.props.fetchUsers()\n    this.props.fetchTeams()\n    console.log(\"roulette\")\n  }\n\n  handleSpin = (e, data) => {\n    this.props.fetchYelp(data.locationInput, data.categoryInput)\n    this.setState({\n      showRouletteForm: false,\n      showPizza: true\n    })\n    this.handleTimer()\n  }\n\n  handleTimer = () => {\n    // countdown a couple seconds changing the set to pizza: true, card: false and back\n    this.setState({ showPizza: true, showCard: false })\n    this.intervalID = setInterval(() => {\n      this.setState({ showPizza: false, showCard: true })\n      console.log(\"pizza\")\n      clearInterval(this.intervalID)\n    }, 3000)\n  }\n\n  randomYelp = array => {\n    this.handleTimer()\n    let randIndex = Math.floor(Math.random() * 10)\n    while (array.includes(randIndex)) {\n      randIndex = Math.floor(Math.random() * 10)\n    }\n    this.setState({ indexArray: [...this.state.indexArray, randIndex] })\n  }\n\n  render() {\n    const { fetchYelp, yelpResults, setResult } = this.props\n    const { showRouletteForm, showPizza, showCard, indexArray } = this.state\n    // console.log(this.props)\n    // console.log(this.state)\n    return (\n      <div style={style} className=\"roulette-container\">\n        {showRouletteForm ? (\n          <RouletteForm\n            handleDropDown={this.handleDropdown}\n            handleSpin={this.handleSpin}\n            fetchYelp={fetchYelp}\n          />\n        ) : null}\n\n        {showPizza ? (\n          <Image src={spinning_pizza} style={{ textAlign: \"center\" }} />\n        ) : null}\n\n        {showCard ? (\n          <RouletteCard\n            yelpResults={yelpResults}\n            handleSpin={this.handleSpin}\n            selectContainer={this.props.selectContainer}\n            handleTimer={this.handleTimer}\n            randomYelp={this.randomYelp}\n            indexArray={indexArray}\n            setResult={setResult}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}