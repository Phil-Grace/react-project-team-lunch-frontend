{"ast":null,"code":"var _jsxFileName = \"/home/phil/dev/projects/react-project-team-lunch/react-project-team-lunch-frontend/src/team/TeamContainer.js\";\nimport React, { Component } from 'react';\nimport TeamForm from './TeamForm';\nimport TeamSearch from './TeamSearch';\nimport MemberForm from './MemberForm';\nimport MemberList from './MemberList';\nimport _ from \"lodash\";\nexport default class TeamContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      team_name: '',\n      location: '',\n      searchInput: '',\n      members: [],\n      team_id: undefined // saveTeam = () => {\n      //     // TODO Take teamname data and POST to teams url\n      //     const fetchTeams = this.props.fetchURL + \"/teams\"\n      //     fetch(fetchTeams).then(res => res.json())\n      //     .then(team => console.log(team))\n      // }\n\n    };\n\n    this.saveTeamMembers = () => {\n      // TODO Take array of members and run POST requests to the user_teams url\n      const fetchUserTeams = this.props.fetchURL + \"/user_teams\";\n      console.log(this.state.members);\n      this.state.members.forEach(member => {\n        fetch(fetchUserTeams, {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: member.id,\n            team_id: this.state.team_id\n          })\n        }).then(res => res.json()).then(newMember => console.log(newMember)).catch(err => console.log(err));\n      });\n    };\n\n    this.addATeam = (e, team) => {\n      const fetchTeams = this.props.fetchURL + \"/teams\";\n      const allTeams = this.props.allTeams;\n      this.setState({\n        team_name: team.teamNameInput,\n        location: team.locationInput\n      });\n      console.log(allTeams.filter(team => team.includes(team_name)));\n      fetch(fetchTeams, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          team_name: team.teamNameInput\n        })\n      }).then(res => res.json()).then(team => this.setState({\n        team_id: team.id\n      })).catch(err => console.log(err));\n    };\n\n    this.addMember = (e, member) => {\n      const memberCheck = this.state.members.includes(member);\n\n      if (!memberCheck) {\n        this.setState({\n          members: [...this.state.members, member]\n        });\n      }\n    };\n\n    this.removeMember = (e, member) => {\n      const newMemberArray = [];\n      this.state.members.forEach(user => {\n        if (user !== member) {\n          newMemberArray.push(user);\n        }\n      });\n      this.setState({\n        members: newMemberArray\n      });\n    };\n\n    this.handleChange = (e, value) => {\n      this.setState({\n        searchInput: value\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          allUsers = _this$props.allUsers,\n          currentUser = _this$props.currentUser;\n    const _this$state = this.state,\n          searchInput = _this$state.searchInput,\n          members = _this$state.members;\n    const filteredUsers = searchInput ? allUsers.filter(user => user.username.includes(searchInput)) : null;\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(TeamForm, {\n      currentUser: currentUser,\n      addATeam: this.addATeam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(MemberList, {\n      members: members,\n      removeMember: this.removeMember,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(MemberForm, {\n      handleChange: this.handleChange,\n      saveTeamMembers: this.saveTeamMembers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(TeamSearch, {\n      addMember: this.addMember,\n      filteredUsers: filteredUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/phil/dev/projects/react-project-team-lunch/react-project-team-lunch-frontend/src/team/TeamContainer.js"],"names":["React","Component","TeamForm","TeamSearch","MemberForm","MemberList","_","TeamContainer","state","team_name","location","searchInput","members","team_id","undefined","saveTeamMembers","fetchUserTeams","props","fetchURL","console","log","forEach","member","fetch","method","headers","body","JSON","stringify","user_id","id","then","res","json","newMember","catch","err","addATeam","e","team","fetchTeams","allTeams","setState","teamNameInput","locationInput","filter","includes","addMember","memberCheck","removeMember","newMemberArray","user","push","handleChange","value","render","allUsers","currentUser","filteredUsers","username"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEjDO,KAFiD,GAEzC;AACJC,MAAAA,SAAS,EAAE,EADP;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,WAAW,EAAE,EAHT;AAIJC,MAAAA,OAAO,EAAE,EAJL;AAKJC,MAAAA,OAAO,EAAEC,SALL,CAQR;AACA;AACA;AACA;AACA;AACA;;AAbQ,KAFyC;;AAAA,SAiBjDC,eAjBiD,GAiB/B,MAAM;AACpB;AACA,YAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWC,QAAX,GAAsB,aAA7C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWI,OAAvB;AACA,WAAKJ,KAAL,CAAWI,OAAX,CAAmBS,OAAnB,CAA2BC,MAAM,IAAI;AACjCC,QAAAA,KAAK,CAACP,cAAD,EAAiB;AAClBQ,UAAAA,MAAM,EAAE,MADU;AAElBC,UAAAA,OAAO,EAAE;AAAC,4BAAgB;AAAjB,WAFS;AAGlBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,YAAAA,OAAO,EAAEP,MAAM,CAACQ,EADC;AAEjBjB,YAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK;AAFH,WAAf;AAHY,SAAjB,CAAL,CAQCkB,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EASCF,IATD,CASMG,SAAS,IAAIf,OAAO,CAACC,GAAR,CAAYc,SAAZ,CATnB,EAUCC,KAVD,CAUOC,GAAG,IAAIjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CAVd;AAWH,OAZD;AAaH,KAlCgD;;AAAA,SAoCjDC,QApCiD,GAoCtC,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACpB,YAAMC,UAAU,GAAG,KAAKvB,KAAL,CAAWC,QAAX,GAAsB,QAAzC;AADoB,YAEZuB,QAFY,GAEC,KAAKxB,KAFN,CAEZwB,QAFY;AAGpB,WAAKC,QAAL,CAAc;AACVjC,QAAAA,SAAS,EAAE8B,IAAI,CAACI,aADN;AAEVjC,QAAAA,QAAQ,EAAE6B,IAAI,CAACK;AAFL,OAAd;AAKAzB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAQ,CAACI,MAAT,CAAgBN,IAAI,IAAIA,IAAI,CAACO,QAAL,CAAcrC,SAAd,CAAxB,CAAZ;AACAc,MAAAA,KAAK,CAACiB,UAAD,EAAa;AACdhB,QAAAA,MAAM,EAAE,MADM;AAEdC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAFK;AAGdC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBnB,UAAAA,SAAS,EAAE8B,IAAI,CAACI;AADC,SAAf;AAHQ,OAAb,CAAL,CAMGZ,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOCF,IAPD,CAOMQ,IAAI,IAAI,KAAKG,QAAL,CAAc;AAAC7B,QAAAA,OAAO,EAAE0B,IAAI,CAACT;AAAf,OAAd,CAPd,EAQCK,KARD,CAQOC,GAAG,IAAIjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CARd;AASH,KAtDgD;;AAAA,SAwDjDW,SAxDiD,GAwDrC,CAACT,CAAD,EAAIhB,MAAJ,KAAe;AACvB,YAAM0B,WAAW,GAAG,KAAKxC,KAAL,CAAWI,OAAX,CAAmBkC,QAAnB,CAA4BxB,MAA5B,CAApB;;AACA,UAAI,CAAC0B,WAAL,EAAkB;AACd,aAAKN,QAAL,CAAc;AAAC9B,UAAAA,OAAO,EAAE,CAAC,GAAG,KAAKJ,KAAL,CAAWI,OAAf,EAAwBU,MAAxB;AAAV,SAAd;AACH;AACJ,KA7DgD;;AAAA,SA+DjD2B,YA/DiD,GA+DlC,CAACX,CAAD,EAAIhB,MAAJ,KAAe;AAC1B,YAAM4B,cAAc,GAAG,EAAvB;AACA,WAAK1C,KAAL,CAAWI,OAAX,CAAmBS,OAAnB,CAA2B8B,IAAI,IAAI;AAC/B,YAAIA,IAAI,KAAK7B,MAAb,EAAqB;AACjB4B,UAAAA,cAAc,CAACE,IAAf,CAAoBD,IAApB;AACH;AACJ,OAJD;AAKA,WAAKT,QAAL,CAAc;AAAC9B,QAAAA,OAAO,EAAEsC;AAAV,OAAd;AACH,KAvEgD;;AAAA,SAyEjDG,YAzEiD,GAyElC,CAACf,CAAD,EAAIgB,KAAJ,KAAe;AAC1B,WAAKZ,QAAL,CAAc;AAAC/B,QAAAA,WAAW,EAAE2C;AAAd,OAAd;AACH,KA3EgD;AAAA;;AA6EjDC,EAAAA,MAAM,GAAG;AAAA,wBAC2B,KAAKtC,KADhC;AAAA,UACEuC,QADF,eACEA,QADF;AAAA,UACYC,WADZ,eACYA,WADZ;AAAA,wBAE0B,KAAKjD,KAF/B;AAAA,UAEEG,WAFF,eAEEA,WAFF;AAAA,UAEeC,OAFf,eAEeA,OAFf;AAGL,UAAM8C,aAAa,GAAG/C,WAAW,GAAG6C,QAAQ,CAACX,MAAT,CAAgBM,IAAI,IAAIA,IAAI,CAACQ,QAAL,CAAcb,QAAd,CAAuBnC,WAAvB,CAAxB,CAAH,GAAkE,IAAnG;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,WAAW,EAAEiD,WAAvB;AAAoC,MAAA,QAAQ,EAAE,KAAKpB,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEzB,OAArB;AAA8B,MAAA,YAAY,EAAE,KAAKqC,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,UAAD;AAAY,MAAA,YAAY,EAAE,KAAKI,YAA/B;AAA6C,MAAA,eAAe,EAAE,KAAKtC,eAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKgC,SAA5B;AAAuC,MAAA,aAAa,EAAEW,aAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AA1FgD","sourcesContent":["import React, { Component } from 'react'\nimport TeamForm from './TeamForm'\nimport TeamSearch from './TeamSearch'\nimport MemberForm from './MemberForm'\nimport MemberList from './MemberList'\nimport _ from \"lodash\";\n\nexport default class TeamContainer extends Component {\n\n    state = {\n        team_name: '',\n        location: '',\n        searchInput: '',\n        members: [],\n        team_id: undefined\n    }\n\n    // saveTeam = () => {\n    //     // TODO Take teamname data and POST to teams url\n    //     const fetchTeams = this.props.fetchURL + \"/teams\"\n    //     fetch(fetchTeams).then(res => res.json())\n    //     .then(team => console.log(team))\n    // }\n\n    saveTeamMembers = () => {\n        // TODO Take array of members and run POST requests to the user_teams url\n        const fetchUserTeams = this.props.fetchURL + \"/user_teams\"\n        console.log(this.state.members)\n        this.state.members.forEach(member => {\n            fetch(fetchUserTeams, {\n                method: \"POST\",\n                headers: {\"content-type\": \"application/json\"},\n                body: JSON.stringify({\n                    user_id: member.id,\n                    team_id: this.state.team_id\n                })\n            })\n            .then(res => res.json())\n            .then(newMember => console.log(newMember))\n            .catch(err => console.log(err))\n        })\n    }\n\n    addATeam = (e, team) => {\n        const fetchTeams = this.props.fetchURL + \"/teams\"\n        const { allTeams } = this.props\n        this.setState({\n            team_name: team.teamNameInput,\n            location: team.locationInput,\n        })\n\n        console.log(allTeams.filter(team => team.includes(team_name)))\n        fetch(fetchTeams, {\n            method: \"POST\",\n            headers: {\"content-type\": \"application/json\"},\n            body: JSON.stringify({\n                team_name: team.teamNameInput\n            })\n        }).then(res => res.json())\n        .then(team => this.setState({team_id: team.id}))\n        .catch(err => console.log(err))\n    }\n\n    addMember = (e, member) => {\n        const memberCheck = this.state.members.includes(member)\n        if (!memberCheck) {\n            this.setState({members: [...this.state.members, member]})\n        }\n    }\n\n    removeMember = (e, member) => {\n        const newMemberArray = []\n        this.state.members.forEach(user => {\n            if (user !== member) {\n                newMemberArray.push(user)\n            }\n        })\n        this.setState({members: newMemberArray})\n    }\n\n    handleChange = (e, value ) => {\n        this.setState({searchInput: value})\n    };\n\n    render() {\n        const {allUsers, currentUser} = this.props\n        const {searchInput, members} = this.state\n        const filteredUsers = searchInput ? allUsers.filter(user => user.username.includes(searchInput)) : null\n        console.log(this.state)\n        return (\n            <div>\n                <TeamForm currentUser={currentUser} addATeam={this.addATeam}/>\n                <MemberList members={members} removeMember={this.removeMember}/>\n                <MemberForm handleChange={this.handleChange} saveTeamMembers={this.saveTeamMembers}/>\n                <TeamSearch addMember={this.addMember} filteredUsers={filteredUsers}/>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}